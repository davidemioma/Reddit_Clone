// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//npm i -D prisma
//npx prisma init
//npx prisma generate - Do this after creating a new model
//npx prisma db push - to push to your database.
//npx prisma migrate reset - to reset your databse.

enum VoteType {
  UP
  DOWN
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id String @id @default(uuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  @@index([userId])
}

model Session{
  id String @id @default(uuid())
  userId String
  sessionToken String? @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id String @id @default(uuid())
  name String? 
  email String? @unique
  emailVerified DateTime? 
  username String? @unique
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  accounts Account[]
  sessions Session[]
  posts Post[]
  comments Comment[]
  votes Vote[]
  CommentVotes CommentVote[]
  subscriptions Subscription[]
  createdSubreddits Subreddit[] @relation("CreatedBy")

}

model Subreddit{
  id String @id @default(uuid())
  name String @unique
  creatorId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator User? @relation("CreatedBy", fields: [creatorId], references: [id])

  posts Post[]
  subscribers Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Subscription{
  userId String
  subredditId String

  user User @relation(fields: [userId], references: [id])
  subreddit Subreddit @relation(fields: [subredditId],references: [id])

  @@id([userId, subredditId])

  @@index([userId])
  @@index([subredditId])
}

model Post{
  id String @id @default(uuid())
  title String
  content Json?
  authorId String
  subredditId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
  subreddit Subreddit @relation(fields: [subredditId],references: [id])

  comments Comment[]
  votes Vote[]

  @@index([authorId])
  @@index([subredditId])
}

model Comment{
  id String @id @default(uuid())
  postId String
  authorId String
  replyToId String?
  text String
  commentId String?
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId],references: [id])
  author User @relation(fields: [authorId],references: [id])
  replyTo Comment? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  replies Comment[] @relation("ReplyTo")
  votes CommentVote[]

  @@index([postId])
  @@index([authorId])
  @@index([replyToId])
}

model Vote{
  postId String
  userId String
  type VoteType

  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  user User @relation(fields: [userId],references: [id])

  @@id([userId, postId])

  @@index([postId])
  @@index([userId])
}

model CommentVote{
  userId String
  commentId String
  type VoteType

  user User @relation(fields: [userId],references: [id])
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])

  @@index([userId])
  @@index([commentId])
}

